{"ast":null,"code":"import shuffle from './shuffle';\nexport default function generateOptions(correctAnswer, allCountries, mode) {\n  if (mode === \"capital\") {\n    const validWrongChoices = allCountries.filter(c => {\n      var _c$capital;\n      return ((_c$capital = c.capital) === null || _c$capital === void 0 ? void 0 : _c$capital[0]) && c.capital[0] !== correctAnswer;\n    }).map(c => c.capital[0]);\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n    return shuffle([...incorrect, correctAnswer]);\n  }\n  if (mode === \"flag\") {\n    var _correctCountry$flags;\n    const correctCountry = allCountries.find(c => c.name.common === correctAnswer);\n    const correctFlagOption = {\n      name: correctCountry.name.common,\n      flag: (_correctCountry$flags = correctCountry.flags) === null || _correctCountry$flags === void 0 ? void 0 : _correctCountry$flags.png\n    };\n    const validWrongChoices = allCountries.filter(c => {\n      var _c$flags;\n      return ((_c$flags = c.flags) === null || _c$flags === void 0 ? void 0 : _c$flags.png) && c.name.common !== correctAnswer;\n    }).map(c => ({\n      name: c.name.common,\n      flag: c.flags.png\n    }));\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n    return shuffle([...incorrect, correctFlagOption]);\n  }\n}","map":{"version":3,"names":["shuffle","generateOptions","correctAnswer","allCountries","mode","validWrongChoices","filter","c","_c$capital","capital","map","incorrect","slice","_correctCountry$flags","correctCountry","find","name","common","correctFlagOption","flag","flags","png","_c$flags"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/utils/generateOptions.js"],"sourcesContent":["import shuffle from './shuffle';\r\n\r\nexport default function generateOptions(correctAnswer, allCountries, mode) {\r\n  if (mode === \"capital\") {\r\n    const validWrongChoices = allCountries\r\n      .filter(c => c.capital?.[0] && c.capital[0] !== correctAnswer)\r\n      .map(c => c.capital[0]);\r\n\r\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\r\n    return shuffle([...incorrect, correctAnswer]);\r\n  }\r\n\r\n  if (mode === \"flag\") {\r\n    const correctCountry = allCountries.find(c => c.name.common === correctAnswer);\r\n    const correctFlagOption = {\r\n      name: correctCountry.name.common,\r\n      flag: correctCountry.flags?.png\r\n    };\r\n\r\n    const validWrongChoices = allCountries\r\n      .filter(c => c.flags?.png && c.name.common !== correctAnswer)\r\n      .map(c => ({\r\n        name: c.name.common,\r\n        flag: c.flags.png\r\n      }));\r\n\r\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\r\n    return shuffle([...incorrect, correctFlagOption]);\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,eAAe,SAASC,eAAeA,CAACC,aAAa,EAAEC,YAAY,EAAEC,IAAI,EAAE;EACzE,IAAIA,IAAI,KAAK,SAAS,EAAE;IACtB,MAAMC,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC;MAAA,IAAAC,UAAA;MAAA,OAAI,EAAAA,UAAA,GAAAD,CAAC,CAACE,OAAO,cAAAD,UAAA,uBAATA,UAAA,CAAY,CAAC,CAAC,KAAID,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,KAAKP,aAAa;IAAA,EAAC,CAC7DQ,GAAG,CAACH,CAAC,IAAIA,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;IAEzB,MAAME,SAAS,GAAGX,OAAO,CAACK,iBAAiB,CAAC,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACxD,OAAOZ,OAAO,CAAC,CAAC,GAAGW,SAAS,EAAET,aAAa,CAAC,CAAC;EAC/C;EAEA,IAAIE,IAAI,KAAK,MAAM,EAAE;IAAA,IAAAS,qBAAA;IACnB,MAAMC,cAAc,GAAGX,YAAY,CAACY,IAAI,CAACR,CAAC,IAAIA,CAAC,CAACS,IAAI,CAACC,MAAM,KAAKf,aAAa,CAAC;IAC9E,MAAMgB,iBAAiB,GAAG;MACxBF,IAAI,EAAEF,cAAc,CAACE,IAAI,CAACC,MAAM;MAChCE,IAAI,GAAAN,qBAAA,GAAEC,cAAc,CAACM,KAAK,cAAAP,qBAAA,uBAApBA,qBAAA,CAAsBQ;IAC9B,CAAC;IAED,MAAMhB,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC;MAAA,IAAAe,QAAA;MAAA,OAAI,EAAAA,QAAA,GAAAf,CAAC,CAACa,KAAK,cAAAE,QAAA,uBAAPA,QAAA,CAASD,GAAG,KAAId,CAAC,CAACS,IAAI,CAACC,MAAM,KAAKf,aAAa;IAAA,EAAC,CAC5DQ,GAAG,CAACH,CAAC,KAAK;MACTS,IAAI,EAAET,CAAC,CAACS,IAAI,CAACC,MAAM;MACnBE,IAAI,EAAEZ,CAAC,CAACa,KAAK,CAACC;IAChB,CAAC,CAAC,CAAC;IAEL,MAAMV,SAAS,GAAGX,OAAO,CAACK,iBAAiB,CAAC,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACxD,OAAOZ,OAAO,CAAC,CAAC,GAAGW,SAAS,EAAEO,iBAAiB,CAAC,CAAC;EACnD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}