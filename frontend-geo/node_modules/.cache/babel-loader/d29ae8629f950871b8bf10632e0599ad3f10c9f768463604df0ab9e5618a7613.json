{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //#################################################################################\n  //preliminaries for handling and updating data\n  const [quiz, setQuiz] = useState([]); //to set up the quiz (choose 10 different contries)\n  const [countries, setCountries] = useState([]); //put all the countries in array\n  const [options, setOptions] = useState([]); //to give options for a question\n  const [answer, setAnswer] = useState(null); // to store answer\n  const [score, setScore] = useState(0); // to keep track of score\n  const [questionIdx, setQuestionIdx] = useState(0); //keep track of question index\n  const [started, setStarted] = useState(false); //keep track if quiz statred and finished\n  const [finished, setFinished] = useState(false);\n  const [loading, setLoading] = useState(true); //show loading\n  const [error, setError] = useState(null); //in case theres errors\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\").then(res => res.json()).then(data => {\n      setCountries(data.results); //store data into countries array\n    }).catch(err => console.error(err));\n  }, []);\n  //################################################################################\n\n  //shuffles the array of countries so it is different each time\n  function shuffle() {\n    let arr = countries.slice();\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n  function setup() {\n    const arr = shuffle();\n    setQuiz(arr.slice(0, 10));\n    setAnswer(arr[0].capital);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/0pxcHF8P1Nc911sWbFbiocRFeo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","countries","setCountries","options","setOptions","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","loading","setLoading","error","setError","fetch","then","res","json","data","results","catch","err","console","shuffle","arr","slice","i","length","j","Math","floor","random","setup","capital","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\n\n\nfunction App() {\n  //#################################################################################\n  //preliminaries for handling and updating data\n  const [quiz, setQuiz] = useState([]); //to set up the quiz (choose 10 different contries)\n  const [countries, setCountries] = useState([]);  //put all the countries in array\n  const [options, setOptions] = useState([]); //to give options for a question\n  const [answer, setAnswer] = useState(null); // to store answer\n  const [score, setScore] = useState(0); // to keep track of score\n  const [questionIdx, setQuestionIdx] = useState(0); //keep track of question index\n  const [started, setStarted] = useState(false); //keep track if quiz statred and finished\n  const [finished, setFinished] = useState(false); \n  const [loading, setLoading] = useState(true);  //show loading\n  const [error, setError] = useState(null);  //in case theres errors\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountries(data.results);  //store data into countries array\n      })\n      .catch((err) => console.error(err));\n  }, []);\n  //################################################################################\n\n\n\n  //shuffles the array of countries so it is different each time\n  function shuffle(){\n    let arr=countries.slice();\n    for(let i = arr.length -1; i>0; i--){\n      const j = Math.floor(Math.random()*(i+1));\n      [arr[i],arr[j]] = [arr[j],arr[i]];\n    }\n    return arr\n  }\n\n  function setup(){\n    const arr = shuffle();\n    setQuiz(arr.slice(0,10));\n    setAnswer(arr[0].capital);\n    \n\n  }\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}