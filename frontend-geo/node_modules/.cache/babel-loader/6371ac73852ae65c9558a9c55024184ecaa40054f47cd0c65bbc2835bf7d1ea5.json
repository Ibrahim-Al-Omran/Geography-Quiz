{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const {\n    countries,\n    loading,\n    error\n  } = useCountries();\n  const [mode, setMode] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [scoreCelebration, setScoreCelebration] = useState(false);\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode) {\n    var _ref, _tenQuestions$0$capit, _tenQuestions$, _tenQuestions$$capita, _tenQuestions$2, _tenQuestions$3, _tenQuestions$3$flags;\n    setMode(selectedMode);\n    const shuffled = shuffle(countries);\n    const tenQuestions = shuffled.slice(0, 10);\n\n    // Determine correct answer safely\n    const correctAnswer = selectedMode === \"capital\" ? (_ref = (_tenQuestions$0$capit = (_tenQuestions$ = tenQuestions[0]) === null || _tenQuestions$ === void 0 ? void 0 : (_tenQuestions$$capita = _tenQuestions$.capital) === null || _tenQuestions$$capita === void 0 ? void 0 : _tenQuestions$$capita[0]) !== null && _tenQuestions$0$capit !== void 0 ? _tenQuestions$0$capit : (_tenQuestions$2 = tenQuestions[0]) === null || _tenQuestions$2 === void 0 ? void 0 : _tenQuestions$2.capital) !== null && _ref !== void 0 ? _ref : \"Unknown\" : ((_tenQuestions$3 = tenQuestions[0]) === null || _tenQuestions$3 === void 0 ? void 0 : (_tenQuestions$3$flags = _tenQuestions$3.flags) === null || _tenQuestions$3$flags === void 0 ? void 0 : _tenQuestions$3$flags.png) || \"\";\n    setQuiz(tenQuestions);\n    setAnswer(correctAnswer);\n    setOptions(generateOptions(correctAnswer, countries, selectedMode));\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    setSelectedAnswer(selected);\n    if (selected === answer) {\n      setScore(prev => prev + 1);\n      setScoreCelebration(true);\n      setTimeout(() => setScoreCelebration(false), 1000); // 1s animation\n    }\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        var _quiz$nextIndex, _quiz$nextIndex$capit, _quiz$nextIndex2;\n        const nextIndex = questionIdx + 1;\n        const nextAnswer = mode === \"capital\" ? ((_quiz$nextIndex = quiz[nextIndex]) === null || _quiz$nextIndex === void 0 ? void 0 : (_quiz$nextIndex$capit = _quiz$nextIndex.capital) === null || _quiz$nextIndex$capit === void 0 ? void 0 : _quiz$nextIndex$capit[nextIndex]) || \"\" : ((_quiz$nextIndex2 = quiz[nextIndex]) === null || _quiz$nextIndex2 === void 0 ? void 0 : _quiz$nextIndex2.flags.png) || \"\";\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, countries, mode));\n      } else {\n        setFinished(true);\n      }\n      setSelectedAnswer(null);\n    }, 1200);\n  }\n  function restartQuiz() {\n    setQuiz([]);\n    setAnswer(null);\n    setScore(0);\n    setQuestionIdx(0);\n    setStarted(false);\n    setFinished(false);\n    setOptions([]);\n    setSelectedAnswer(null);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorScreen, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, this), !started && !loading && !error && /*#__PURE__*/_jsxDEV(StartScreen, {\n        onStart: setupQuiz\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 44\n      }, this), started && !finished && /*#__PURE__*/_jsxDEV(QuizContainer, {\n        current: quiz[questionIdx],\n        mode: mode,\n        quiz: quiz,\n        questionIdx: questionIdx,\n        answer: answer,\n        options: options,\n        handleAnswer: handleAnswer,\n        selectedAnswer: selectedAnswer,\n        score: score,\n        scoreCelebration: scoreCelebration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), finished && /*#__PURE__*/_jsxDEV(ResultScreen, {\n        score: score,\n        total: quiz.length,\n        onRestart: restartQuiz,\n        length: quiz.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WMW7Jme3Ab4GCd8LzCuJA5QSiKM=\", false, function () {\n  return [useCountries];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StartScreen","QuizContainer","ResultScreen","useCountries","shuffle","generateOptions","Loading","ErrorScreen","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","options","setOptions","countries","loading","error","mode","setMode","selectedAnswer","setSelectedAnswer","scoreCelebration","setScoreCelebration","setupQuiz","selectedMode","_ref","_tenQuestions$0$capit","_tenQuestions$","_tenQuestions$$capita","_tenQuestions$2","_tenQuestions$3","_tenQuestions$3$flags","shuffled","tenQuestions","slice","correctAnswer","capital","flags","png","handleAnswer","selected","document","activeElement","blur","prev","setTimeout","length","_quiz$nextIndex","_quiz$nextIndex$capit","_quiz$nextIndex2","nextIndex","nextAnswer","restartQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","current","total","onRestart","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\n\n\n\nfunction App() {\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const { countries, loading, error } = useCountries();\n  const [mode, setMode] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [scoreCelebration, setScoreCelebration] = useState(false);\n\n\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode) {\n    setMode(selectedMode);\n    const shuffled = shuffle(countries);\n    const tenQuestions = shuffled.slice(0, 10);\n\n    // Determine correct answer safely\n    const correctAnswer = selectedMode === \"capital\"\n      ? tenQuestions[0]?.capital?.[0] ?? tenQuestions[0]?.capital ?? \"Unknown\"\n      : tenQuestions[0]?.flags?.png || \"\";\n\n    setQuiz(tenQuestions);\n    setAnswer(correctAnswer);\n    setOptions(generateOptions(correctAnswer, countries, selectedMode));\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n}\n\n\n\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    setSelectedAnswer(selected);\n\n    if (selected === answer) {\n      setScore((prev) => prev + 1);\n      setScoreCelebration(true);\n      setTimeout(() => setScoreCelebration(false), 1000); // 1s animation\n    }\n\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        const nextIndex = questionIdx + 1;\n        const nextAnswer = mode === \"capital\" ? \n          quiz[nextIndex]?.capital?.[nextIndex] || \"\" :\n          quiz[nextIndex]?.flags.png || \"\";\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, countries, mode));\n      } else {\n        setFinished(true);\n      }\n      setSelectedAnswer(null);\n    }, 1200);\n  }\n\n  function restartQuiz() {\n    setQuiz([]);\n    setAnswer(null);\n    setScore(0);\n    setQuestionIdx(0);\n    setStarted(false);\n    setFinished(false);\n    setOptions([]);\n    setSelectedAnswer(null);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"card-container\">\n        {loading && <Loading />}\n        {error && <ErrorScreen error={error} />}\n        {!started && !loading && !error && <StartScreen onStart={setupQuiz} />}\n        {started && !finished && (\n          <QuizContainer\n            current={quiz[questionIdx]}\n            mode={mode}\n            quiz={quiz}\n            questionIdx={questionIdx}\n            answer={answer}\n            options={options}\n            handleAnswer={handleAnswer}\n            selectedAnswer={selectedAnswer}  \n            score={score}\n            scoreCelebration={scoreCelebration}\n          />\n\n        )}\n        {finished && (\n          <ResultScreen\n            score={score}\n            total={quiz.length}\n            onRestart={restartQuiz}\n            length = {quiz.length}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}