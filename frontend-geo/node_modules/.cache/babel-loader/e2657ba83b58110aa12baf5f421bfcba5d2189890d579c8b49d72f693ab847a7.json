{"ast":null,"code":"import{useState,useEffect}from'react';export default function useCountries(){const[countries,setCountries]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags,region\").then(res=>res.json()).then(data=>{const filtered=data.filter(c=>{var _c$flags;return c.capital&&c.capital[0]&&((_c$flags=c.flags)===null||_c$flags===void 0?void 0:_c$flags.png);});setCountries(filtered);setLoading(false);}).catch(err=>{setError(\"Failed to fetch countries\");setLoading(false);});},[]);return{countries,loading,error};}","map":{"version":3,"names":["useState","useEffect","useCountries","countries","setCountries","loading","setLoading","error","setError","fetch","then","res","json","data","filtered","filter","c","_c$flags","capital","flags","png","catch","err"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/hooks/useCountries.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useCountries() {\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags,region\")\n      .then((res) => res.json())\n      .then((data) => {\n        const filtered = data.filter(c => c.capital && c.capital[0] && c.flags?.png);\n        setCountries(filtered);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(\"Failed to fetch countries\");\n        setLoading(false);\n      });\n  }, []);\n\n  return { countries, loading, error };\n}\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,cAAe,SAAS,CAAAC,YAAYA,CAAA,CAAG,CACrC,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGJ,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACK,OAAO,CAAEC,UAAU,CAAC,CAAGN,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACO,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACdQ,KAAK,CAAC,qEAAqE,CAAC,CACzEC,IAAI,CAAEC,GAAG,EAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,EAAK,CACd,KAAM,CAAAC,QAAQ,CAAGD,IAAI,CAACE,MAAM,CAACC,CAAC,OAAAC,QAAA,OAAI,CAAAD,CAAC,CAACE,OAAO,EAAIF,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,IAAAD,QAAA,CAAID,CAAC,CAACG,KAAK,UAAAF,QAAA,iBAAPA,QAAA,CAASG,GAAG,IAAC,CAC5EhB,YAAY,CAACU,QAAQ,CAAC,CACtBR,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACDe,KAAK,CAAEC,GAAG,EAAK,CACdd,QAAQ,CAAC,2BAA2B,CAAC,CACrCF,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEH,SAAS,CAAEE,OAAO,CAAEE,KAAM,CAAC,CACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}