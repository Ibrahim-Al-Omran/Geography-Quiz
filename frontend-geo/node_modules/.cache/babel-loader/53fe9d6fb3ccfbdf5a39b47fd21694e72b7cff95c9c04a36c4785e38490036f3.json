{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [quiz, setQuiz] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [option, setOptions] = useState([]);\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\").then(res => res.json()).then(data => {\n      setCountries(data);\n      setLoading(false);\n    }).catch(err => {\n      setError(\"Failed to fetch countries\");\n      setLoading(false);\n    });\n  }, []);\n\n  // Shuffle helper\n  function shuffle(arr) {\n    const array = arr.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n  function setupQuiz() {\n    var _tenQuestions$, _tenQuestions$$capita;\n    const shuffled = shuffle(countries);\n    const tenQuestions = shuffled.slice(0, 10);\n    setQuiz(tenQuestions);\n    setAnswer(((_tenQuestions$ = tenQuestions[0]) === null || _tenQuestions$ === void 0 ? void 0 : (_tenQuestions$$capita = _tenQuestions$.capital) === null || _tenQuestions$$capita === void 0 ? void 0 : _tenQuestions$$capita[0]) || \"\"); // some capitals are arrays\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n    setOptions(generateOptions(answer, countries));\n  }\n  function renderQuestion() {\n    if (!quiz.length) return null;\n    const current = quiz[questionIdx];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: current.flags.png,\n        alt: `Flag of ${current.name.common}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"What is the capital of this country?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), options.map((option, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAnswer(option),\n        children: option\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n  function handleAnswer(option) {\n    if (option === answer) {\n      setScore(prev => prev + 1);\n    }\n    if (questionIdx < 9) {\n      var _quiz$nextIndex, _quiz$nextIndex$capit;\n      const nextIndex = questionIdx + 1;\n      setQuestionIdx(nextIndex);\n      setAnswer(((_quiz$nextIndex = quiz[nextIndex]) === null || _quiz$nextIndex === void 0 ? void 0 : (_quiz$nextIndex$capit = _quiz$nextIndex.capital) === null || _quiz$nextIndex$capit === void 0 ? void 0 : _quiz$nextIndex$capit[0]) || \"\");\n      // also: regenerate new options here if needed\n    } else {\n      setFinished(true);\n    }\n  }\n  function generateOptions(correctCapital, allCountries) {\n    // Filter countries that have valid capitals and are NOT the correct answer\n    const validWrongChoices = allCountries.filter(c => c.capital && c.capital[0] && c.capital[0] !== correctCapital).map(c => c.capital[0]);\n\n    // Shuffle and take first 3 incorrect options\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n\n    // Add correct answer and shuffle the final options\n    return shuffle([...incorrect, correctCapital]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading countries...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this), !started && !loading && !error && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setupQuiz,\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), started && !finished && renderQuestion()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oOuSd4YbMR6jkFgDRfOp+aA689E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","countries","setCountries","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","loading","setLoading","error","setError","option","setOptions","fetch","then","res","json","data","catch","err","shuffle","arr","array","slice","i","length","j","Math","floor","random","setupQuiz","_tenQuestions$","_tenQuestions$$capita","shuffled","tenQuestions","capital","generateOptions","renderQuestion","current","children","src","flags","png","alt","name","common","fileName","_jsxFileName","lineNumber","columnNumber","options","map","idx","onClick","handleAnswer","prev","_quiz$nextIndex","_quiz$nextIndex$capit","nextIndex","correctCapital","allCountries","validWrongChoices","filter","c","incorrect","className","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [quiz, setQuiz] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const[option, setOptions] = useState([])\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountries(data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(\"Failed to fetch countries\");\n        setLoading(false);\n      });\n  }, []);\n\n  // Shuffle helper\n  function shuffle(arr) {\n    const array = arr.slice();\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  function setupQuiz() {\n    const shuffled = shuffle(countries);\n    const tenQuestions = shuffled.slice(0, 10);\n    setQuiz(tenQuestions);\n    setAnswer(tenQuestions[0]?.capital?.[0] || \"\"); // some capitals are arrays\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n    setOptions(generateOptions(answer, countries))\n  }\n\n  function renderQuestion(){\n    if(!quiz.length) return null;\n    const current = quiz[questionIdx];\n\n    return (\n      <div>\n        <img src={current.flags.png} alt={`Flag of ${current.name.common}`} />\n        <h2>What is the capital of this country?</h2>\n        {options.map((option, idx) => (\n          <button key={idx} onClick={() => handleAnswer(option)}>\n            {option}\n          </button>\n        ))}\n      </div>\n    );\n  }\n\n  function handleAnswer(option) {\n    if (option === answer) {\n      setScore(prev => prev + 1);\n    }\n    if (questionIdx < 9) {\n      const nextIndex = questionIdx + 1;\n      setQuestionIdx(nextIndex);\n      setAnswer(quiz[nextIndex]?.capital?.[0] || \"\");\n      // also: regenerate new options here if needed\n    } \n    else {\n      setFinished(true);\n    }\n  }\n\n  function generateOptions(correctCapital, allCountries) {\n    // Filter countries that have valid capitals and are NOT the correct answer\n    const validWrongChoices = allCountries\n      .filter(c => c.capital && c.capital[0] && c.capital[0] !== correctCapital)\n      .map(c => c.capital[0]);\n\n    // Shuffle and take first 3 incorrect options\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n\n    // Add correct answer and shuffle the final options\n    return shuffle([...incorrect, correctCapital]);\n  }\n\n  return (\n    <div className=\"App\">\n      {loading && <p>Loading countries...</p>}\n      {error && <p>{error}</p>}\n      {!started && !loading && !error && (\n        <button onClick={setupQuiz}>Start Quiz</button>\n      )}\n      {started && !finished && renderQuestion()}\n\n      {/* TODO: Show question, options, handle answer, and show results */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}