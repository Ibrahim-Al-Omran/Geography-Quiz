{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\components\\\\ResultScreen.jsx\";\nimport React from 'react';\nimport styles from './ResultScreen.module.css';\n// import styles from './ResultScreen.module.css';\n\n// Make sure to destructure props: score, total, onRestart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResultScreen({\n  score,\n  total,\n  onRestart\n}) {\n  const percentage = total > 0 ? Math.round(score / total * 100) : 0;\n  let message = \"Great job! 🎉\";\n  if (percentage < 30) {\n    message = \"Keep practicing! You'll get there. 🧐\";\n  } else if (percentage < 60) {\n    message = \"Not bad! A little more practice needed. 👍\";\n  } else if (percentage < 90) {\n    message = \"Well done! You know your geography! 🌍\";\n  } else {\n    message = \"Excellent! You're a geography whiz! 🌟\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"title\",\n      children: \"Quiz Completed!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"score-text\",\n      children: [\"Your score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score-value\",\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), \" / \", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"percentage-text\",\n      children: [\"(\", percentage, \"%)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRestart,\n      className: \"button-primary\" // Use your primary button style\n      ,\n      children: \"Restart Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"result-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_c = ResultScreen;\nvar _c;\n$RefreshReg$(_c, \"ResultScreen\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","ResultScreen","score","total","onRestart","percentage","Math","round","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/components/ResultScreen.jsx"],"sourcesContent":["import React from 'react';\r\nimport styles from './ResultScreen.module.css';\r\n// import styles from './ResultScreen.module.css';\r\n\r\n// Make sure to destructure props: score, total, onRestart\r\nexport default function ResultScreen({ score, total, onRestart }) {\r\n  const percentage = total > 0 ? Math.round((score / total) * 100) : 0;\r\n  let message = \"Great job! 🎉\";\r\n\r\n  if (percentage < 30) {\r\n    message = \"Keep practicing! You'll get there. 🧐\";\r\n  } else if (percentage < 60) {\r\n    message = \"Not bad! A little more practice needed. 👍\";\r\n  } else if (percentage < 90) {\r\n    message = \"Well done! You know your geography! 🌍\";\r\n  } else {\r\n    message = \"Excellent! You're a geography whiz! 🌟\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\"> {/* Use the 'card' class for styling */}\r\n      <h2 className=\"title\">Quiz Completed!</h2>\r\n      <p className=\"score-text\">\r\n        Your score: <span className=\"score-value\">{score}</span> / {total}\r\n      </p>\r\n      <p className=\"percentage-text\">({percentage}%)</p>\r\n      <button\r\n        onClick={onRestart}\r\n        className=\"button-primary\" // Use your primary button style\r\n      >\r\n        Restart Quiz\r\n      </button>\r\n      <p className=\"result-message\">{message}</p>\r\n    </div>\r\n  );\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,2BAA2B;AAC9C;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,SAASC,YAAYA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAU,CAAC,EAAE;EAChE,MAAMC,UAAU,GAAGF,KAAK,GAAG,CAAC,GAAGG,IAAI,CAACC,KAAK,CAAEL,KAAK,GAAGC,KAAK,GAAI,GAAG,CAAC,GAAG,CAAC;EACpE,IAAIK,OAAO,GAAG,eAAe;EAE7B,IAAIH,UAAU,GAAG,EAAE,EAAE;IACnBG,OAAO,GAAG,uCAAuC;EACnD,CAAC,MAAM,IAAIH,UAAU,GAAG,EAAE,EAAE;IAC1BG,OAAO,GAAG,4CAA4C;EACxD,CAAC,MAAM,IAAIH,UAAU,GAAG,EAAE,EAAE;IAC1BG,OAAO,GAAG,wCAAwC;EACpD,CAAC,MAAM;IACLA,OAAO,GAAG,wCAAwC;EACpD;EAEA,oBACER,OAAA;IAAKS,SAAS,EAAC,MAAM;IAAAC,QAAA,GAAC,GAAC,eACrBV,OAAA;MAAIS,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Cd,OAAA;MAAGS,SAAS,EAAC,YAAY;MAAAC,QAAA,GAAC,cACZ,eAAAV,OAAA;QAAMS,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAER;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,OAAG,EAACX,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,eACJd,OAAA;MAAGS,SAAS,EAAC,iBAAiB;MAAAC,QAAA,GAAC,GAAC,EAACL,UAAU,EAAC,IAAE;IAAA;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAClDd,OAAA;MACEe,OAAO,EAAEX,SAAU;MACnBK,SAAS,EAAC,gBAAgB,CAAC;MAAA;MAAAC,QAAA,EAC5B;IAED;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTd,OAAA;MAAGS,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEF;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV;AAACE,EAAA,GA9BuBf,YAAY;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}