{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\";\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\n\n//#################################################################################\n//preliminaries for handling and updating data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [quiz, setQuiz] = useState([]); //to set up the quiz (choose 10 different contries)\nconst [countries, setCountries] = useState([]); //put all the countries in array\nconst [options, setOptions] = useState([]); //to give options for a question\nconst [answer, setAnswer] = useState(null); // to store answer\nconst [score, setScore] = useState(0); // to keep track of score\nconst [questionIdx, setQuestionIdx] = useState(0); //keep track of question index\nconst [started, setStarted] = useState(false); //keep track if quiz statred and finished\nconst [finished, setFinished] = useState(false);\nconst [loading, setLoading] = useState(true); //show loading\nconst [error, setError] = useState(null); //in case theres errors\n\nuseEffect(() => {\n  fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\").then(res => res.json()).then(data => {\n    setCountries(data.results); //store data into countries array\n  }).catch(err => console.error(err));\n}, []);\n//################################################################################\n\n//shuffles the array of countries so it is different each time\nfunction shuffle() {\n  let arr = countries.slice();\n  for (let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n}\nfunction setup() {\n  const arr = shuffle();\n  setQuiz(arr.slice(0, 10));\n}\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","quiz","setQuiz","countries","setCountries","options","setOptions","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","loading","setLoading","error","setError","fetch","then","res","json","data","results","catch","err","console","shuffle","arr","slice","i","length","j","Math","floor","random","setup","App","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\n\n//#################################################################################\n//preliminaries for handling and updating data\nconst [quiz, setQuiz] = useState([]); //to set up the quiz (choose 10 different contries)\nconst [countries, setCountries] = useState([]);  //put all the countries in array\nconst [options, setOptions] = useState([]); //to give options for a question\nconst [answer, setAnswer] = useState(null); // to store answer\nconst [score, setScore] = useState(0); // to keep track of score\nconst [questionIdx, setQuestionIdx] = useState(0); //keep track of question index\nconst [started, setStarted] = useState(false); //keep track if quiz statred and finished\nconst [finished, setFinished] = useState(false); \nconst [loading, setLoading] = useState(true);  //show loading\nconst [error, setError] = useState(null);  //in case theres errors\n\n useEffect(() => {\n  fetch(\"https://restcountries.com/v3.1/all?fields=name,capital,flags\")\n    .then((res) => res.json())\n    .then((data) => {\n      setCountries(data.results);  //store data into countries array\n    })\n    .catch((err) => console.error(err));\n}, []);\n//################################################################################\n\n\n\n//shuffles the array of countries so it is different each time\nfunction shuffle(){\n  let arr=countries.slice();\n  for(let i = arr.length -1; i>0; i--){\n    const j = Math.floor(Math.random()*(i+1));\n    [arr[i],arr[j]] = [arr[j],arr[i]];\n  }\n  return arr\n}\n\nfunction setup(){\n  const arr = shuffle();\n  setQuiz(arr.slice(0,10));\n\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACtC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;AACjD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/C,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;AAC/C,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;AAC/C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;AAE1CC,SAAS,CAAC,MAAM;EACfuB,KAAK,CAAC,8DAA8D,CAAC,CAClEC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;IACdrB,YAAY,CAACqB,IAAI,CAACC,OAAO,CAAC,CAAC,CAAE;EAC/B,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACV,KAAK,CAACS,GAAG,CAAC,CAAC;AACvC,CAAC,EAAE,EAAE,CAAC;AACN;;AAIA;AACA,SAASE,OAAOA,CAAA,EAAE;EAChB,IAAIC,GAAG,GAAC5B,SAAS,CAAC6B,KAAK,CAAC,CAAC;EACzB,KAAI,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAM,GAAE,CAAC,EAAED,CAAC,GAAC,CAAC,EAAEA,CAAC,EAAE,EAAC;IAClC,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAEL,CAAC,GAAC,CAAC,CAAC,CAAC;IACzC,CAACF,GAAG,CAACE,CAAC,CAAC,EAACF,GAAG,CAACI,CAAC,CAAC,CAAC,GAAG,CAACJ,GAAG,CAACI,CAAC,CAAC,EAACJ,GAAG,CAACE,CAAC,CAAC,CAAC;EACnC;EACA,OAAOF,GAAG;AACZ;AAEA,SAASQ,KAAKA,CAAA,EAAE;EACd,MAAMR,GAAG,GAAGD,OAAO,CAAC,CAAC;EACrB5B,OAAO,CAAC6B,GAAG,CAACC,KAAK,CAAC,CAAC,EAAC,EAAE,CAAC,CAAC;AAE1B;AAGA,SAASQ,GAAGA,CAAA,EAAG;EACb,oBACExC,OAAA;IAAKyC,SAAS,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEV;AAACC,EAAA,GANQN,GAAG;AAQZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}