{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\components\\\\OptionsGrid.jsx\";\nimport React from 'react';\nimport styles from './OptionsGrid.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OptionsGrid = ({\n  options,\n  onOptionClick,\n  correctAnswer,\n  selectedAnswer,\n  mode\n}) => {\n  if (!options || options.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.optionsGrid,\n    children: options.map((option, index) => {\n      let className = styles.optionButton;\n\n      // Determine the value to compare (name for flag mode, direct string for capital)\n      const optionValue = mode === \"flag\" ? option.name : option;\n      if (selectedAnswer) {\n        if (optionValue === correctAnswer) {\n          className += ` ${styles.correct}`;\n        } else if (optionValue === selectedAnswer) {\n          className += ` ${styles.wrong}`;\n        }\n      }\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: className,\n        onClick: () => onOptionClick(optionValue),\n        disabled: !!selectedAnswer,\n        children: mode === \"capital\" ? option : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: option.flag,\n          alt: `Flag of ${option.name}`,\n          className: styles.flagOptionImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = OptionsGrid;\nexport default OptionsGrid;\nvar _c;\n$RefreshReg$(_c, \"OptionsGrid\");","map":{"version":3,"names":["React","styles","jsxDEV","_jsxDEV","OptionsGrid","options","onOptionClick","correctAnswer","selectedAnswer","mode","length","className","optionsGrid","children","map","option","index","optionButton","optionValue","name","correct","wrong","onClick","disabled","src","flag","alt","flagOptionImage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/components/OptionsGrid.jsx"],"sourcesContent":["import React from 'react';\r\nimport styles from './OptionsGrid.module.css';\r\n\r\nconst OptionsGrid = ({ options, onOptionClick, correctAnswer, selectedAnswer, mode }) => {\r\n  if (!options || options.length === 0) return null;\r\n\r\n  return (\r\n    <div className={styles.optionsGrid}>\r\n      {options.map((option, index) => {\r\n        let className = styles.optionButton;\r\n\r\n        // Determine the value to compare (name for flag mode, direct string for capital)\r\n        const optionValue = mode === \"flag\" ? option.name : option;\r\n\r\n        if (selectedAnswer) {\r\n          if (optionValue === correctAnswer) {\r\n            className += ` ${styles.correct}`;\r\n          } else if (optionValue === selectedAnswer) {\r\n            className += ` ${styles.wrong}`;\r\n          }\r\n        }\r\n\r\n        return (\r\n          <button\r\n            key={index}\r\n            className={className}\r\n            onClick={() => onOptionClick(optionValue)}\r\n            disabled={!!selectedAnswer}\r\n          >\r\n            {mode === \"capital\" ? (\r\n              option\r\n            ) : (\r\n              <img\r\n                src={option.flag}\r\n                alt={`Flag of ${option.name}`}\r\n                className={styles.flagOptionImage}\r\n              />\r\n            )}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptionsGrid;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,WAAW,GAAGA,CAAC;EAAEC,OAAO;EAAEC,aAAa;EAAEC,aAAa;EAAEC,cAAc;EAAEC;AAAK,CAAC,KAAK;EACvF,IAAI,CAACJ,OAAO,IAAIA,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAEjD,oBACEP,OAAA;IAAKQ,SAAS,EAAEV,MAAM,CAACW,WAAY;IAAAC,QAAA,EAChCR,OAAO,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MAC9B,IAAIL,SAAS,GAAGV,MAAM,CAACgB,YAAY;;MAEnC;MACA,MAAMC,WAAW,GAAGT,IAAI,KAAK,MAAM,GAAGM,MAAM,CAACI,IAAI,GAAGJ,MAAM;MAE1D,IAAIP,cAAc,EAAE;QAClB,IAAIU,WAAW,KAAKX,aAAa,EAAE;UACjCI,SAAS,IAAI,IAAIV,MAAM,CAACmB,OAAO,EAAE;QACnC,CAAC,MAAM,IAAIF,WAAW,KAAKV,cAAc,EAAE;UACzCG,SAAS,IAAI,IAAIV,MAAM,CAACoB,KAAK,EAAE;QACjC;MACF;MAEA,oBACElB,OAAA;QAEEQ,SAAS,EAAEA,SAAU;QACrBW,OAAO,EAAEA,CAAA,KAAMhB,aAAa,CAACY,WAAW,CAAE;QAC1CK,QAAQ,EAAE,CAAC,CAACf,cAAe;QAAAK,QAAA,EAE1BJ,IAAI,KAAK,SAAS,GACjBM,MAAM,gBAENZ,OAAA;UACEqB,GAAG,EAAET,MAAM,CAACU,IAAK;UACjBC,GAAG,EAAE,WAAWX,MAAM,CAACI,IAAI,EAAG;UAC9BR,SAAS,EAAEV,MAAM,CAAC0B;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC;MACF,GAbIf,KAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcJ,CAAC;IAEb,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAxCI5B,WAAW;AA0CjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}