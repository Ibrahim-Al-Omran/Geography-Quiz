{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const {\n    countries,\n    loading,\n    error\n  } = useCountries();\n  const [mode, setMode] = useState('capital'); // Default mode\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode) {\n    console.log(\"Setting up quiz for mode:\", selectedMode);\n    const shuffled = shuffle(countries);\n    // Filter or select questions based on 'selectedMode' if necessary\n    const tenQuestions = shuffled.slice(0, 10);\n    if (tenQuestions.length === 0) {\n      setError(\"Not enough data to start the quiz for the selected mode.\");\n      setStarted(false);\n      return;\n    }\n    let firstAnswerValue = \"\";\n    if (selectedMode === 'capital') {\n      var _tenQuestions$, _tenQuestions$$capita;\n      firstAnswerValue = ((_tenQuestions$ = tenQuestions[0]) === null || _tenQuestions$ === void 0 ? void 0 : (_tenQuestions$$capita = _tenQuestions$.capital) === null || _tenQuestions$$capita === void 0 ? void 0 : _tenQuestions$$capita[0]) || \"\";\n    } else if (selectedMode === 'flag') {\n      var _tenQuestions$2, _tenQuestions$2$name;\n      // For \"guess the flag\", the answer would be the country name\n      firstAnswerValue = ((_tenQuestions$2 = tenQuestions[0]) === null || _tenQuestions$2 === void 0 ? void 0 : (_tenQuestions$2$name = _tenQuestions$2.name) === null || _tenQuestions$2$name === void 0 ? void 0 : _tenQuestions$2$name.common) || \"\";\n    }\n    // Add other modes here\n\n    setQuiz(tenQuestions);\n    setAnswer(firstAnswerValue);\n    // generateOptions will also need to be mode-aware\n    setOptions(generateOptions(firstAnswerValue, countries, selectedMode, tenQuestions[0]));\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    for (let i = 0; i < 4; i++) {\n      const optionButton = document.getElementById(`option-${i}`);\n      const buttonText = optionButton.textContent;\n      if (buttonText === answer) {\n        optionButton.classList.add(\"correct\");\n      } else {\n        optionButton.classList.add(\"wrong\");\n      }\n    }\n    if (selected === answer) {\n      setScore(prev => prev + 1);\n      const liveScore = document.querySelector('.live-score');\n      const scoreValue = document.querySelector('.score-value');\n      if (liveScore) {\n        liveScore.classList.add('celebrate');\n        setTimeout(() => liveScore.classList.remove('celebrate'), 600);\n      }\n      if (scoreValue) {\n        scoreValue.classList.add('update');\n        setTimeout(() => scoreValue.classList.remove('update'), 600);\n      }\n    }\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        const nextIndex = questionIdx + 1;\n        let nextAnswer = \"\";\n        if (mode === 'capital') {\n          var _quiz$nextIndex, _quiz$nextIndex$capit;\n          nextAnswer = ((_quiz$nextIndex = quiz[nextIndex]) === null || _quiz$nextIndex === void 0 ? void 0 : (_quiz$nextIndex$capit = _quiz$nextIndex.capital) === null || _quiz$nextIndex$capit === void 0 ? void 0 : _quiz$nextIndex$capit[0]) || \"\";\n        } else if (mode === 'flag') {\n          var _quiz$nextIndex2, _quiz$nextIndex2$name;\n          nextAnswer = ((_quiz$nextIndex2 = quiz[nextIndex]) === null || _quiz$nextIndex2 === void 0 ? void 0 : (_quiz$nextIndex2$name = _quiz$nextIndex2.name) === null || _quiz$nextIndex2$name === void 0 ? void 0 : _quiz$nextIndex2$name.common) || \"\";\n        }\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, countries, mode, quiz[nextIndex]));\n      } else {\n        setFinished(true);\n      }\n      for (let i = 0; i < 4; i++) {\n        const optionButton = document.getElementById(`option-${i}`);\n        optionButton.classList.remove(\"correct\", \"wrong\");\n      }\n    }, 1200);\n  }\n\n  // Make generateOptions mode-aware\n  function generateOptions(correctAnswer, allCountries, currentMode, currentQuestionData) {\n    let incorrectChoicesSource = [];\n    if (currentMode === 'capital') {\n      incorrectChoicesSource = allCountries.filter(c => c.capital && c.capital[0] && c.capital[0] !== correctAnswer).map(c => c.capital[0]);\n    } else if (currentMode === 'flag') {\n      // Options are country names, answer is the correct country name for the flag\n      incorrectChoicesSource = allCountries.filter(c => c.name && c.name.common && c.name.common !== correctAnswer).map(c => c.name.common);\n    }\n    // Add other modes\n\n    const incorrect = shuffle(incorrectChoicesSource).slice(0, 3);\n    return shuffle([...incorrect, correctAnswer]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorScreen, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }, this), !started && !loading && !error && /*#__PURE__*/_jsxDEV(StartScreen, {\n        setMode: setMode // Now setMode is correctly passed\n        ,\n        onStart: selectedMode => {\n          // Modify onStart if StartScreen passes the mode\n          // If StartScreen sets the mode directly, you might not need setMode prop\n          // Or, StartScreen calls setMode prop, and then onStart\n          setupQuiz(selectedMode); // Pass the mode to setupQuiz\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), started && !finished && /*#__PURE__*/_jsxDEV(QuizContainer, {\n        current: quiz[questionIdx],\n        mode: mode,\n        quiz: quiz,\n        questionIdx: questionIdx,\n        answer: answer,\n        options: options,\n        score: score,\n        onAnswer: handleAnswer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), finished && /*#__PURE__*/_jsxDEV(ResultScreen, {\n        score: score,\n        total: quiz.length,\n        onRestart: setupQuiz\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"50+HITYuuBwAuobRsrrwvk522vE=\", false, function () {\n  return [useCountries];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","StartScreen","QuizContainer","ResultScreen","useCountries","shuffle","generateOptions","Loading","ErrorScreen","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","options","setOptions","countries","loading","error","mode","setMode","setupQuiz","selectedMode","console","log","shuffled","tenQuestions","slice","length","setError","firstAnswerValue","_tenQuestions$","_tenQuestions$$capita","capital","_tenQuestions$2","_tenQuestions$2$name","name","common","handleAnswer","selected","document","activeElement","blur","i","optionButton","getElementById","buttonText","textContent","classList","add","prev","liveScore","querySelector","scoreValue","setTimeout","remove","nextIndex","nextAnswer","_quiz$nextIndex","_quiz$nextIndex$capit","_quiz$nextIndex2","_quiz$nextIndex2$name","correctAnswer","allCountries","currentMode","currentQuestionData","incorrectChoicesSource","filter","c","map","incorrect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","current","onAnswer","total","onRestart","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\n\n\n\nfunction App() {\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const { countries, loading, error } = useCountries();\n  const [mode, setMode] = useState('capital'); // Default mode\n\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode) {\n    console.log(\"Setting up quiz for mode:\", selectedMode);\n\n    const shuffled = shuffle(countries);\n    // Filter or select questions based on 'selectedMode' if necessary\n    const tenQuestions = shuffled.slice(0, 10);\n\n    if (tenQuestions.length === 0) {\n      setError(\"Not enough data to start the quiz for the selected mode.\");\n      setStarted(false);\n      return;\n    }\n\n    let firstAnswerValue = \"\";\n    if (selectedMode === 'capital') {\n      firstAnswerValue = tenQuestions[0]?.capital?.[0] || \"\";\n    } else if (selectedMode === 'flag') {\n      // For \"guess the flag\", the answer would be the country name\n      firstAnswerValue = tenQuestions[0]?.name?.common || \"\";\n    }\n    // Add other modes here\n\n    setQuiz(tenQuestions);\n    setAnswer(firstAnswerValue);\n    // generateOptions will also need to be mode-aware\n    setOptions(generateOptions(firstAnswerValue, countries, selectedMode, tenQuestions[0]));\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    \n    for (let i = 0; i < 4; i++) {\n      const optionButton = document.getElementById(`option-${i}`);\n      const buttonText = optionButton.textContent;\n      if (buttonText === answer) {\n        optionButton.classList.add(\"correct\");\n      } else {\n        optionButton.classList.add(\"wrong\");\n      }\n    }\n\n    if (selected === answer) {\n      setScore((prev) => prev + 1);\n      const liveScore = document.querySelector('.live-score');\n      const scoreValue = document.querySelector('.score-value');\n      if (liveScore) {\n        liveScore.classList.add('celebrate');\n        setTimeout(() => liveScore.classList.remove('celebrate'), 600);\n      }\n      if (scoreValue) {\n        scoreValue.classList.add('update');\n        setTimeout(() => scoreValue.classList.remove('update'), 600);\n      }\n    }\n\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        const nextIndex = questionIdx + 1;\n        let nextAnswer = \"\";\n        if (mode === 'capital') {\n          nextAnswer = quiz[nextIndex]?.capital?.[0] || \"\";\n        } else if (mode === 'flag') {\n          nextAnswer = quiz[nextIndex]?.name?.common || \"\";\n        }\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, countries, mode, quiz[nextIndex]));\n      } else {\n        setFinished(true);\n      }\n      for (let i = 0; i < 4; i++) {\n        const optionButton = document.getElementById(`option-${i}`);\n        optionButton.classList.remove(\"correct\", \"wrong\");\n      }\n    }, 1200);\n  }\n\n  // Make generateOptions mode-aware\n  function generateOptions(correctAnswer, allCountries, currentMode, currentQuestionData) {\n    let incorrectChoicesSource = [];\n    if (currentMode === 'capital') {\n      incorrectChoicesSource = allCountries\n        .filter(c => c.capital && c.capital[0] && c.capital[0] !== correctAnswer)\n        .map(c => c.capital[0]);\n    } else if (currentMode === 'flag') {\n      // Options are country names, answer is the correct country name for the flag\n      incorrectChoicesSource = allCountries\n        .filter(c => c.name && c.name.common && c.name.common !== correctAnswer)\n        .map(c => c.name.common);\n    }\n    // Add other modes\n\n    const incorrect = shuffle(incorrectChoicesSource).slice(0, 3);\n    return shuffle([...incorrect, correctAnswer]);\n  }\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"card-container\">\n        {loading && <Loading />}\n        {error && <ErrorScreen error={error} />}\n        {!started && !loading && !error && (\n          <StartScreen\n            setMode={setMode} // Now setMode is correctly passed\n            onStart={(selectedMode) => { // Modify onStart if StartScreen passes the mode\n              // If StartScreen sets the mode directly, you might not need setMode prop\n              // Or, StartScreen calls setMode prop, and then onStart\n              setupQuiz(selectedMode); // Pass the mode to setupQuiz\n            }}\n          />\n        )}\n        {started && !finished && (\n          <QuizContainer\n            current={quiz[questionIdx]}\n            mode ={mode}\n            quiz={quiz}\n            questionIdx={questionIdx}\n            answer={answer}\n            options={options}\n            score={score}\n            onAnswer={handleAnswer}\n          />\n        )}\n        {finished && (\n          <ResultScreen\n            score={score}\n            total={quiz.length}\n            onRestart={setupQuiz}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}