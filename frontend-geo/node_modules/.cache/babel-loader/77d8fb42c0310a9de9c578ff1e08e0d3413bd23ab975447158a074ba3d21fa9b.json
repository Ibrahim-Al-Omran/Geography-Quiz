{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const {\n    countries,\n    loading,\n    error\n  } = useCountries();\n  const [mode, setMode] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [scoreCelebration, setScoreCelebration] = useState(false);\n  const [region, setRegion] = useState(null);\n  const allRegions = [\"All\", ...new Set(countries.map(c => c.region).filter(Boolean).filter(region => region !== \"Antarctic\"))];\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode, selectedRegion) {\n    var _tenQuestions$, _tenQuestions$$capita, _tenQuestions$2;\n    setMode(selectedMode);\n    setRegion(selectedRegion);\n\n    // Filter countries by region if a region is selected\n    const filtered = selectedRegion === \"All\" ? countries : countries.filter(c => c.region === selectedRegion);\n    const shuffled = shuffle(filtered);\n    const tenQuestions = shuffled.slice(0, 10);\n    const correctAnswer = selectedMode === \"capital\" ? ((_tenQuestions$ = tenQuestions[0]) === null || _tenQuestions$ === void 0 ? void 0 : (_tenQuestions$$capita = _tenQuestions$.capital) === null || _tenQuestions$$capita === void 0 ? void 0 : _tenQuestions$$capita[0]) || \"\" : ((_tenQuestions$2 = tenQuestions[0]) === null || _tenQuestions$2 === void 0 ? void 0 : _tenQuestions$2.flags.png) || \"\";\n    setQuiz(tenQuestions);\n    setAnswer(correctAnswer);\n    setOptions(generateOptions(correctAnswer, filtered, selectedMode)); // Use filtered instead of countries\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    setSelectedAnswer(selected);\n    if (selected === answer) {\n      setScore(prev => prev + 1);\n      setScoreCelebration(true);\n      setTimeout(() => setScoreCelebration(false), 1000); // 1s animation\n    }\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        var _quiz$nextIndex, _quiz$nextIndex$capit, _quiz$nextIndex2;\n        const nextIndex = questionIdx + 1;\n        const nextAnswer = mode === \"capital\" ? ((_quiz$nextIndex = quiz[nextIndex]) === null || _quiz$nextIndex === void 0 ? void 0 : (_quiz$nextIndex$capit = _quiz$nextIndex.capital) === null || _quiz$nextIndex$capit === void 0 ? void 0 : _quiz$nextIndex$capit[0]) || \"\" : ((_quiz$nextIndex2 = quiz[nextIndex]) === null || _quiz$nextIndex2 === void 0 ? void 0 : _quiz$nextIndex2.flags.png) || \"\";\n\n        // Filter countries by the same region used for the quiz\n        const filtered = region === \"All\" ? countries : countries.filter(c => c.region === region);\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, filtered, mode)); // Use filtered instead of countries\n      } else {\n        setFinished(true);\n      }\n      setSelectedAnswer(null);\n    }, 1200);\n  }\n  function restartQuiz() {\n    setQuiz([]);\n    setAnswer(null);\n    setScore(0);\n    setQuestionIdx(0);\n    setStarted(false);\n    setFinished(false);\n    setOptions([]);\n    setSelectedAnswer(null);\n    setMode(null);\n    setScoreCelebration(false);\n    setRegion(null);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: [loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(ErrorScreen, {\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }, this), !started && !loading && !error && /*#__PURE__*/_jsxDEV(StartScreen, {\n        onStart: setupQuiz,\n        regions: allRegions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 44\n      }, this), started && !finished && /*#__PURE__*/_jsxDEV(QuizContainer, {\n        current: quiz[questionIdx],\n        mode: mode,\n        quiz: quiz,\n        questionIdx: questionIdx,\n        answer: answer,\n        options: options,\n        handleAnswer: handleAnswer,\n        selectedAnswer: selectedAnswer,\n        score: score,\n        scoreCelebration: scoreCelebration,\n        onBack: restartQuiz\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), finished && /*#__PURE__*/_jsxDEV(ResultScreen, {\n        score: score,\n        total: quiz.length,\n        onRestart: restartQuiz,\n        length: quiz.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hh1z2fXt8nFrqYKFyFpLevWyeEM=\", false, function () {\n  return [useCountries];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","StartScreen","QuizContainer","ResultScreen","useCountries","shuffle","generateOptions","Loading","ErrorScreen","jsxDEV","_jsxDEV","App","_s","quiz","setQuiz","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","options","setOptions","countries","loading","error","mode","setMode","selectedAnswer","setSelectedAnswer","scoreCelebration","setScoreCelebration","region","setRegion","allRegions","Set","map","c","filter","Boolean","setupQuiz","selectedMode","selectedRegion","_tenQuestions$","_tenQuestions$$capita","_tenQuestions$2","filtered","shuffled","tenQuestions","slice","correctAnswer","capital","flags","png","handleAnswer","selected","document","activeElement","blur","prev","setTimeout","length","_quiz$nextIndex","_quiz$nextIndex$capit","_quiz$nextIndex2","nextIndex","nextAnswer","restartQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStart","regions","current","onBack","total","onRestart","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\n\n\n\nfunction App() {\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const { countries, loading, error } = useCountries();\n  const [mode, setMode] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [scoreCelebration, setScoreCelebration] = useState(false);\n  const [region, setRegion] = useState(null);\n  const allRegions = [\"All\", ...new Set(countries.map(c => c.region).filter(Boolean).filter(region => region !== \"Antarctic\"))];\n\n\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode, selectedRegion) {\n    setMode(selectedMode);\n    setRegion(selectedRegion);\n\n    // Filter countries by region if a region is selected\n    const filtered = selectedRegion === \"All\"\n      ? countries\n      : countries.filter(c => c.region === selectedRegion);\n\n    const shuffled = shuffle(filtered);\n    const tenQuestions = shuffled.slice(0, 10);\n\n    const correctAnswer = selectedMode === \"capital\"\n      ? tenQuestions[0]?.capital?.[0] || \"\"\n      : tenQuestions[0]?.flags.png || \"\";\n\n    setQuiz(tenQuestions);\n    setAnswer(correctAnswer);\n    setOptions(generateOptions(correctAnswer, filtered, selectedMode)); // Use filtered instead of countries\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n\n\n\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    setSelectedAnswer(selected);\n\n    if (selected === answer) {\n      setScore((prev) => prev + 1);\n      setScoreCelebration(true);\n      setTimeout(() => setScoreCelebration(false), 1000); // 1s animation\n    }\n\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        const nextIndex = questionIdx + 1;\n        const nextAnswer = mode === \"capital\" ? \n          quiz[nextIndex]?.capital?.[0] || \"\" :\n          quiz[nextIndex]?.flags.png || \"\";\n        \n        // Filter countries by the same region used for the quiz\n        const filtered = region === \"All\" \n          ? countries \n          : countries.filter(c => c.region === region);\n        \n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, filtered, mode)); // Use filtered instead of countries\n      } else {\n        setFinished(true);\n      }\n      setSelectedAnswer(null);\n    }, 1200);\n  }\n\n  function restartQuiz() {\n    setQuiz([]);\n    setAnswer(null);\n    setScore(0);\n    setQuestionIdx(0);\n    setStarted(false);\n    setFinished(false);\n    setOptions([]);\n    setSelectedAnswer(null);\n    setMode(null);\n    setScoreCelebration(false);\n    setRegion(null);\n  }\n\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"card-container\">\n        {loading && <Loading />}\n        {error && <ErrorScreen error={error} />}\n        {!started && !loading && !error && <StartScreen onStart={setupQuiz} regions={allRegions} />}\n        {started && !finished && (\n          <QuizContainer\n            current={quiz[questionIdx]}\n            mode={mode}\n            quiz={quiz}\n            questionIdx={questionIdx}\n            answer={answer}\n            options={options}\n            handleAnswer={handleAnswer}\n            selectedAnswer={selectedAnswer}  \n            score={score}\n            scoreCelebration={scoreCelebration}\n            onBack={restartQuiz}\n          />\n        )}\n        {finished && (\n          <ResultScreen\n            score={score}\n            total={quiz.length}\n            onRestart={restartQuiz}\n            length = {quiz.length}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}