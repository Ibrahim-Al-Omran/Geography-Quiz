{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cool_\\\\Documents\\\\geoTrivia\\\\frontend-geo\\\\src\\\\components\\\\QuizContainer.jsx\";\nimport React from 'react';\n// import styles from './QuizContainer.module.css'; // If you use CSS Modules\n\n// Props: current (question data), mode, quiz, questionIdx, answer (correct answer),\n// options (array of choices), handleAnswer (function), selectedAnswer, score\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function QuizContainer({\n  current,\n  mode,\n  quiz,\n  questionIdx,\n  options,\n  // This will contain image URLs in 'flag' mode for options\n  handleAnswer,\n  selectedAnswer,\n  // The answer chosen by the user\n  answer // The correct answer (e.g. correct flag URL or correct capital name)\n}) {\n  if (!current) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 34\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n  let questionText = \"\";\n  let mainDisplayContent = null;\n  if (mode === 'capital') {\n    questionText = `What is the capital of ${current.name.common}?`;\n    mainDisplayContent = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flag-container\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: current.flags.png,\n        alt: `Flag of ${current.name.common}`,\n        className: \"flag-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  } else if (mode === 'flag') {\n    // Assuming the question is \"Which of these is the flag of [Country Name]?\"\n    // And the 'options' are flag URLs. The 'answer' state in App.js is the correct flag URL.\n    questionText = `Which of these is the flag of ${current.name.common}?`;\n    // No main flag display needed here if options are flags, or adjust as per your game logic\n    // If you still want to show the country name prominently or some other clue:\n    mainDisplayContent = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-prompt-flag-mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this);\n  }\n  // Add other modes here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: `${(questionIdx + 1) / ((quiz === null || quiz === void 0 ? void 0 : quiz.length) || 10) * 100}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"progress-text\",\n      children: [\"Question \", questionIdx + 1, \" of \", (quiz === null || quiz === void 0 ? void 0 : quiz.length) || 10]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), mainDisplayContent, /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question\",\n      children: questionText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-grid\",\n        children: options && options.map((optionValue, idx) => {\n          let buttonClass = \"option-button\";\n          if (selectedAnswer) {\n            if (optionValue === answer) {\n              buttonClass += \" option-correct\";\n            } else if (optionValue === selectedAnswer) {\n              buttonClass += \" option-wrong\";\n            } else {\n              buttonClass += \" option-disabled\";\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => !selectedAnswer && handleAnswer(optionValue),\n            className: buttonClass,\n            disabled: selectedAnswer !== null,\n            children: mode === 'flag' ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: optionValue,\n              alt: `Option ${idx + 1}`,\n              className: \"option-flag-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this) : optionValue // Display text for other modes (e.g., capital names)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-container\",\n      children: selectedAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `feedback-text ${selectedAnswer === answer ? \"feedback-correct\" : \"feedback-wrong\"}`,\n        children: [selectedAnswer === answer ? \"✅ Correct!\" : `❌ Wrong! Correct: ${mode === 'flag' ? '' : answer}`, mode === 'flag' && selectedAnswer !== answer && answer && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"correct-answer-flag-preview\",\n          children: [\"Correct flag: \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: answer,\n            alt: \"Correct flag\",\n            style: {\n              height: '30px',\n              verticalAlign: 'middle',\n              marginLeft: '5px',\n              border: '1px solid #ccc'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_c = QuizContainer;\nvar _c;\n$RefreshReg$(_c, \"QuizContainer\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","QuizContainer","current","mode","quiz","questionIdx","options","handleAnswer","selectedAnswer","answer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","questionText","mainDisplayContent","name","common","src","flags","png","alt","style","width","length","map","optionValue","idx","buttonClass","onClick","disabled","height","verticalAlign","marginLeft","border","_c","$RefreshReg$"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/components/QuizContainer.jsx"],"sourcesContent":["import React from 'react';\r\n// import styles from './QuizContainer.module.css'; // If you use CSS Modules\r\n\r\n// Props: current (question data), mode, quiz, questionIdx, answer (correct answer),\r\n// options (array of choices), handleAnswer (function), selectedAnswer, score\r\nexport default function QuizContainer({\r\n  current,\r\n  mode,\r\n  quiz,\r\n  questionIdx,\r\n  options, // This will contain image URLs in 'flag' mode for options\r\n  handleAnswer,\r\n  selectedAnswer, // The answer chosen by the user\r\n  answer // The correct answer (e.g. correct flag URL or correct capital name)\r\n}) {\r\n  if (!current) {\r\n    return <div className=\"card\"><p>Loading question...</p></div>;\r\n  }\r\n\r\n  let questionText = \"\";\r\n  let mainDisplayContent = null;\r\n\r\n  if (mode === 'capital') {\r\n    questionText = `What is the capital of ${current.name.common}?`;\r\n    mainDisplayContent = (\r\n      <div className=\"flag-container\">\r\n        <img\r\n          src={current.flags.png}\r\n          alt={`Flag of ${current.name.common}`}\r\n          className=\"flag-image\"\r\n        />\r\n      </div>\r\n    );\r\n  } else if (mode === 'flag') {\r\n    // Assuming the question is \"Which of these is the flag of [Country Name]?\"\r\n    // And the 'options' are flag URLs. The 'answer' state in App.js is the correct flag URL.\r\n    questionText = `Which of these is the flag of ${current.name.common}?`;\r\n    // No main flag display needed here if options are flags, or adjust as per your game logic\r\n    // If you still want to show the country name prominently or some other clue:\r\n    mainDisplayContent = (\r\n        <div className=\"question-prompt-flag-mode\">\r\n            {/* You could display the country name here if it's not in questionText */}\r\n        </div>\r\n    );\r\n  }\r\n  // Add other modes here\r\n\r\n  return (\r\n    <div className=\"card quiz-container\">\r\n      <div className=\"progress-container\">\r\n        <div\r\n          className=\"progress-bar\"\r\n          style={{ width: `${((questionIdx + 1) / (quiz?.length || 10)) * 100}%` }}\r\n        ></div>\r\n      </div>\r\n      <p className=\"progress-text\">\r\n        Question {questionIdx + 1} of {quiz?.length || 10}\r\n      </p>\r\n\r\n      {mainDisplayContent}\r\n\r\n      <h2 className=\"question\">{questionText}</h2>\r\n\r\n      <div className=\"options-container\">\r\n        <div className=\"options-grid\">\r\n          {options && options.map((optionValue, idx) => {\r\n            let buttonClass = \"option-button\";\r\n            if (selectedAnswer) {\r\n              if (optionValue === answer) {\r\n                buttonClass += \" option-correct\";\r\n              } else if (optionValue === selectedAnswer) {\r\n                buttonClass += \" option-wrong\";\r\n              } else {\r\n                buttonClass += \" option-disabled\";\r\n              }\r\n            }\r\n\r\n            return (\r\n              <button\r\n                key={idx}\r\n                onClick={() => !selectedAnswer && handleAnswer(optionValue)}\r\n                className={buttonClass}\r\n                disabled={selectedAnswer !== null}\r\n              >\r\n                {mode === 'flag' ? (\r\n                  <img src={optionValue} alt={`Option ${idx + 1}`} className=\"option-flag-image\" />\r\n                ) : (\r\n                  optionValue // Display text for other modes (e.g., capital names)\r\n                )}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Feedback can remain the same */}\r\n      <div className=\"feedback-container\">\r\n        {selectedAnswer && (\r\n          <p className={`feedback-text ${selectedAnswer === answer ? \"feedback-correct\" : \"feedback-wrong\"}`}>\r\n            {selectedAnswer === answer ? \"✅ Correct!\" : `❌ Wrong! Correct: ${mode === 'flag' ? '' : answer}`}\r\n            {/* For flag mode, showing the correct answer textually might be tricky if it's an image.\r\n                The visual highlighting (option-correct) is more important.\r\n                If the answer is a country name for a flag, you could show that.\r\n            */}\r\n            {mode === 'flag' && selectedAnswer !== answer && answer && (\r\n                <span className=\"correct-answer-flag-preview\">\r\n                    Correct flag: <img src={answer} alt=\"Correct flag\" style={{height: '30px', verticalAlign: 'middle', marginLeft: '5px', border: '1px solid #ccc'}} />\r\n                </span>\r\n            )}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}