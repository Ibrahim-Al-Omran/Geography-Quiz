{"ast":null,"code":"import shuffle from './shuffle';\nexport default function generateOptions(correctAnswer, allCountries, mode) {\n  if (mode === \"capital\") {\n    // Filter countries with valid (non-empty) capitals AND not equal to correctAnswer\n    const validWrongChoices = allCountries.filter(c => Array.isArray(c.capital) && c.capital[0] && c.capital[0] !== correctAnswer).map(c => c.capital[0]);\n\n    // Ensure uniqueness and remove any undefined or empty strings\n    const uniqueWrongChoices = [...new Set(validWrongChoices)].filter(Boolean);\n\n    // Pick 3 wrong answers\n    const incorrect = shuffle(uniqueWrongChoices).slice(0, 3);\n\n    // Combine and shuffle\n    return shuffle([...incorrect, correctAnswer]);\n  }\n  if (mode === \"flag\") {\n    const validWrongChoices = allCountries.filter(c => {\n      var _c$flags;\n      return ((_c$flags = c.flags) === null || _c$flags === void 0 ? void 0 : _c$flags.png) && c.flags.png !== correctAnswer;\n    }).map(c => c.flags.png);\n    const uniqueWrongChoices = [...new Set(validWrongChoices)].filter(Boolean);\n    const incorrect = shuffle(uniqueWrongChoices).slice(0, 3);\n    return shuffle([...incorrect, correctAnswer]);\n  }\n\n  // Fallback if mode is unknown\n  return [];\n}","map":{"version":3,"names":["shuffle","generateOptions","correctAnswer","allCountries","mode","validWrongChoices","filter","c","Array","isArray","capital","map","uniqueWrongChoices","Set","Boolean","incorrect","slice","_c$flags","flags","png"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/utils/generateOptions.js"],"sourcesContent":["import shuffle from './shuffle';\r\n\r\nexport default function generateOptions(correctAnswer, allCountries, mode) {\r\n  if (mode === \"capital\") {\r\n    // Filter countries with valid (non-empty) capitals AND not equal to correctAnswer\r\n    const validWrongChoices = allCountries\r\n      .filter(c => Array.isArray(c.capital) && c.capital[0] && c.capital[0] !== correctAnswer)\r\n      .map(c => c.capital[0]);\r\n\r\n    // Ensure uniqueness and remove any undefined or empty strings\r\n    const uniqueWrongChoices = [...new Set(validWrongChoices)].filter(Boolean);\r\n\r\n    // Pick 3 wrong answers\r\n    const incorrect = shuffle(uniqueWrongChoices).slice(0, 3);\r\n\r\n    // Combine and shuffle\r\n    return shuffle([...incorrect, correctAnswer]);\r\n  }\r\n\r\n  if (mode === \"flag\") {\r\n    const validWrongChoices = allCountries\r\n      .filter(c => c.flags?.png && c.flags.png !== correctAnswer)\r\n      .map(c => c.flags.png);\r\n\r\n    const uniqueWrongChoices = [...new Set(validWrongChoices)].filter(Boolean);\r\n\r\n    const incorrect = shuffle(uniqueWrongChoices).slice(0, 3);\r\n\r\n    return shuffle([...incorrect, correctAnswer]);\r\n  }\r\n\r\n  // Fallback if mode is unknown\r\n  return [];\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,eAAe,SAASC,eAAeA,CAACC,aAAa,EAAEC,YAAY,EAAEC,IAAI,EAAE;EACzE,IAAIA,IAAI,KAAK,SAAS,EAAE;IACtB;IACA,MAAMC,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC,IAAIC,KAAK,CAACC,OAAO,CAACF,CAAC,CAACG,OAAO,CAAC,IAAIH,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,IAAIH,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,KAAKR,aAAa,CAAC,CACvFS,GAAG,CAACJ,CAAC,IAAIA,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEzB;IACA,MAAME,kBAAkB,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACR,iBAAiB,CAAC,CAAC,CAACC,MAAM,CAACQ,OAAO,CAAC;;IAE1E;IACA,MAAMC,SAAS,GAAGf,OAAO,CAACY,kBAAkB,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;IAEzD;IACA,OAAOhB,OAAO,CAAC,CAAC,GAAGe,SAAS,EAAEb,aAAa,CAAC,CAAC;EAC/C;EAEA,IAAIE,IAAI,KAAK,MAAM,EAAE;IACnB,MAAMC,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC;MAAA,IAAAU,QAAA;MAAA,OAAI,EAAAA,QAAA,GAAAV,CAAC,CAACW,KAAK,cAAAD,QAAA,uBAAPA,QAAA,CAASE,GAAG,KAAIZ,CAAC,CAACW,KAAK,CAACC,GAAG,KAAKjB,aAAa;IAAA,EAAC,CAC1DS,GAAG,CAACJ,CAAC,IAAIA,CAAC,CAACW,KAAK,CAACC,GAAG,CAAC;IAExB,MAAMP,kBAAkB,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACR,iBAAiB,CAAC,CAAC,CAACC,MAAM,CAACQ,OAAO,CAAC;IAE1E,MAAMC,SAAS,GAAGf,OAAO,CAACY,kBAAkB,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAEzD,OAAOhB,OAAO,CAAC,CAAC,GAAGe,SAAS,EAAEb,aAAa,CAAC,CAAC;EAC/C;;EAEA;EACA,OAAO,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}