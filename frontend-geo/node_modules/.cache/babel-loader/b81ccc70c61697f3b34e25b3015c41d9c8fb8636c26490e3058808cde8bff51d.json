{"ast":null,"code":"import React,{useState}from\"react\";import'./App.css';import'./components/global.css';import StartScreen from'./components/StartScreen';import QuizContainer from'./components/QuizContainer';// Changed from QuizCard\nimport ResultScreen from'./components/ResultScreen';// Changed from FinishScreen\nimport useCountries from'./hooks/useCountries';import shuffle from\"./utils/shuffle\";import generateOptions from\"./utils/generateOptions\";import Loading from'./components/Loading';import ErrorScreen from'./components/ErrorScreen';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){//initialize state variables\nconst[quiz,setQuiz]=useState([]);const[answer,setAnswer]=useState(null);const[score,setScore]=useState(0);const[questionIdx,setQuestionIdx]=useState(0);const[started,setStarted]=useState(false);const[finished,setFinished]=useState(false);const[options,setOptions]=useState([]);const{countries,loading,error}=useCountries();const[mode,setMode]=useState(null);const[selectedAnswer,setSelectedAnswer]=useState(null);const[scoreCelebration,setScoreCelebration]=useState(false);const[region,setRegion]=useState(null);const allRegions=[\"All\",...new Set(countries.map(c=>c.region).filter(Boolean))];//determine the type of quiz, and pass on all info\nfunction setupQuiz(selectedMode,selectedRegion){var _tenQuestions$,_tenQuestions$$capita,_tenQuestions$2;setMode(selectedMode);// Filter countries by region if a region is selected\nconst filtered=selectedRegion===\"All\"?countries:countries.filter(c=>c.region===selectedRegion);const shuffled=shuffle(filtered);const tenQuestions=shuffled.slice(0,10);const correctAnswer=selectedMode===\"capital\"?((_tenQuestions$=tenQuestions[0])===null||_tenQuestions$===void 0?void 0:(_tenQuestions$$capita=_tenQuestions$.capital)===null||_tenQuestions$$capita===void 0?void 0:_tenQuestions$$capita[0])||\"\":((_tenQuestions$2=tenQuestions[0])===null||_tenQuestions$2===void 0?void 0:_tenQuestions$2.flags.png)||\"\";setQuiz(tenQuestions);setAnswer(correctAnswer);setOptions(generateOptions(correctAnswer,countries,selectedMode));setQuestionIdx(0);setScore(0);setStarted(true);setFinished(false);}function handleAnswer(selected){document.activeElement.blur();setSelectedAnswer(selected);if(selected===answer){setScore(prev=>prev+1);setScoreCelebration(true);setTimeout(()=>setScoreCelebration(false),1000);// 1s animation\n}setTimeout(()=>{if(questionIdx<quiz.length-1){var _quiz$nextIndex,_quiz$nextIndex$capit,_quiz$nextIndex2;const nextIndex=questionIdx+1;const nextAnswer=mode===\"capital\"?((_quiz$nextIndex=quiz[nextIndex])===null||_quiz$nextIndex===void 0?void 0:(_quiz$nextIndex$capit=_quiz$nextIndex.capital)===null||_quiz$nextIndex$capit===void 0?void 0:_quiz$nextIndex$capit[0])||\"\":((_quiz$nextIndex2=quiz[nextIndex])===null||_quiz$nextIndex2===void 0?void 0:_quiz$nextIndex2.flags.png)||\"\";setQuestionIdx(nextIndex);setAnswer(nextAnswer);setOptions(generateOptions(nextAnswer,countries,mode));}else{setFinished(true);}setSelectedAnswer(null);},1200);}function restartQuiz(){setQuiz([]);setAnswer(null);setScore(0);setQuestionIdx(0);setStarted(false);setFinished(false);setOptions([]);setSelectedAnswer(null);setMode(null);setScoreCelebration(false);}return/*#__PURE__*/_jsx(\"div\",{className:\"app-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card-container\",children:[loading&&/*#__PURE__*/_jsx(Loading,{}),error&&/*#__PURE__*/_jsx(ErrorScreen,{error:error}),!started&&!loading&&!error&&/*#__PURE__*/_jsx(StartScreen,{onStart:setupQuiz,regions:allRegions}),started&&!finished&&/*#__PURE__*/_jsx(QuizContainer,{current:quiz[questionIdx],mode:mode,quiz:quiz,questionIdx:questionIdx,answer:answer,options:options,handleAnswer:handleAnswer,selectedAnswer:selectedAnswer,score:score,scoreCelebration:scoreCelebration,onBack:restartQuiz}),finished&&/*#__PURE__*/_jsx(ResultScreen,{score:score,total:quiz.length,onRestart:restartQuiz,length:quiz.length})]})});}export default App;","map":{"version":3,"names":["React","useState","StartScreen","QuizContainer","ResultScreen","useCountries","shuffle","generateOptions","Loading","ErrorScreen","jsx","_jsx","jsxs","_jsxs","App","quiz","setQuiz","answer","setAnswer","score","setScore","questionIdx","setQuestionIdx","started","setStarted","finished","setFinished","options","setOptions","countries","loading","error","mode","setMode","selectedAnswer","setSelectedAnswer","scoreCelebration","setScoreCelebration","region","setRegion","allRegions","Set","map","c","filter","Boolean","setupQuiz","selectedMode","selectedRegion","_tenQuestions$","_tenQuestions$$capita","_tenQuestions$2","filtered","shuffled","tenQuestions","slice","correctAnswer","capital","flags","png","handleAnswer","selected","document","activeElement","blur","prev","setTimeout","length","_quiz$nextIndex","_quiz$nextIndex$capit","_quiz$nextIndex2","nextIndex","nextAnswer","restartQuiz","className","children","onStart","regions","current","onBack","total","onRestart"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport './components/global.css';\nimport StartScreen from './components/StartScreen';\nimport QuizContainer from './components/QuizContainer'; // Changed from QuizCard\nimport ResultScreen from './components/ResultScreen'; // Changed from FinishScreen\nimport useCountries from './hooks/useCountries';\nimport shuffle from \"./utils/shuffle\";\nimport generateOptions from \"./utils/generateOptions\";\nimport Loading from './components/Loading';\nimport ErrorScreen from './components/ErrorScreen';\n\n\n\nfunction App() {\n  //initialize state variables\n  const [quiz, setQuiz] = useState([]);\n  const [answer, setAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [finished, setFinished] = useState(false);\n  const [options, setOptions] = useState([]);\n  const { countries, loading, error } = useCountries();\n  const [mode, setMode] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [scoreCelebration, setScoreCelebration] = useState(false);\n  const [region, setRegion] = useState(null);\n  const allRegions = [\"All\", ...new Set(countries.map(c => c.region).filter(Boolean))];\n\n\n\n  //determine the type of quiz, and pass on all info\n  function setupQuiz(selectedMode, selectedRegion) {\n    setMode(selectedMode);\n\n    // Filter countries by region if a region is selected\n    const filtered = selectedRegion === \"All\"\n      ? countries\n      : countries.filter(c => c.region === selectedRegion);\n\n    const shuffled = shuffle(filtered);\n    const tenQuestions = shuffled.slice(0, 10);\n\n    const correctAnswer = selectedMode === \"capital\"\n      ? tenQuestions[0]?.capital?.[0] || \"\"\n      : tenQuestions[0]?.flags.png || \"\";\n\n    setQuiz(tenQuestions);\n    setAnswer(correctAnswer);\n    setOptions(generateOptions(correctAnswer, countries, selectedMode));\n    setQuestionIdx(0);\n    setScore(0);\n    setStarted(true);\n    setFinished(false);\n  }\n\n\n\n  function handleAnswer(selected) {\n    document.activeElement.blur();\n    setSelectedAnswer(selected);\n\n    if (selected === answer) {\n      setScore((prev) => prev + 1);\n      setScoreCelebration(true);\n      setTimeout(() => setScoreCelebration(false), 1000); // 1s animation\n    }\n\n    setTimeout(() => {\n      if (questionIdx < quiz.length - 1) {\n        const nextIndex = questionIdx + 1;\n        const nextAnswer = mode === \"capital\" ? \n          quiz[nextIndex]?.capital?.[0] || \"\" :\n          quiz[nextIndex]?.flags.png || \"\";\n        setQuestionIdx(nextIndex);\n        setAnswer(nextAnswer);\n        setOptions(generateOptions(nextAnswer, countries, mode));\n      } else {\n        setFinished(true);\n      }\n      setSelectedAnswer(null);\n    }, 1200);\n  }\n\n  function restartQuiz() {\n    setQuiz([]);\n    setAnswer(null);\n    setScore(0);\n    setQuestionIdx(0);\n    setStarted(false);\n    setFinished(false);\n    setOptions([]);\n    setSelectedAnswer(null);\n    setMode(null);\n    setScoreCelebration(false);\n  }\n\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"card-container\">\n        {loading && <Loading />}\n        {error && <ErrorScreen error={error} />}\n        {!started && !loading && !error && <StartScreen onStart={setupQuiz} regions={allRegions} />}\n        {started && !finished && (\n          <QuizContainer\n            current={quiz[questionIdx]}\n            mode={mode}\n            quiz={quiz}\n            questionIdx={questionIdx}\n            answer={answer}\n            options={options}\n            handleAnswer={handleAnswer}\n            selectedAnswer={selectedAnswer}  \n            score={score}\n            scoreCelebration={scoreCelebration}\n            onBack={restartQuiz}\n          />\n        )}\n        {finished && (\n          <ResultScreen\n            score={score}\n            total={quiz.length}\n            onRestart={restartQuiz}\n            length = {quiz.length}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}