{"ast":null,"code":"import shuffle from './shuffle';\nexport default function generateOptions(correctAnswer, allCountries, mode) {\n  if (mode === \"capital\") {\n    const validWrongChoices = allCountries.filter(c => c.capital && c.capital[0] && c.capital[0] !== correctAnswer).map(c => c.capital[0]);\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n    return shuffle([...incorrect, correctAnswer]);\n  } else if (mode === \"flag\") {\n    var _correctCountry$flags;\n    const correctCountry = allCountries.find(c => c.name.common === correctAnswer);\n    const correctFlagUrl = correctCountry === null || correctCountry === void 0 ? void 0 : (_correctCountry$flags = correctCountry.flags) === null || _correctCountry$flags === void 0 ? void 0 : _correctCountry$flags.png;\n    const validWrongChoices = allCountries.filter(c => {\n      var _c$flags;\n      return ((_c$flags = c.flags) === null || _c$flags === void 0 ? void 0 : _c$flags.png) && c.name.common !== correctAnswer;\n    }).map(c => c.flags.png);\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\n\n    // Ensure correct answer is a flag URL\n    return shuffle([...incorrect, correctFlagUrl]);\n  }\n  return [];\n}","map":{"version":3,"names":["shuffle","generateOptions","correctAnswer","allCountries","mode","validWrongChoices","filter","c","capital","map","incorrect","slice","_correctCountry$flags","correctCountry","find","name","common","correctFlagUrl","flags","png","_c$flags"],"sources":["C:/Users/cool_/Documents/geoTrivia/frontend-geo/src/utils/generateOptions.js"],"sourcesContent":["import shuffle from './shuffle';\r\nexport default function generateOptions(correctAnswer, allCountries, mode) {\r\n  \r\n  if (mode === \"capital\") {\r\n    const validWrongChoices = allCountries\r\n      .filter(c => c.capital && c.capital[0] && c.capital[0] !== correctAnswer)\r\n      .map(c => c.capital[0]);\r\n    const incorrect = shuffle(validWrongChoices).slice(0, 3);\r\n    return shuffle([...incorrect, correctAnswer]);\r\n  } \r\n  else if (mode === \"flag\"){\r\n  const correctCountry = allCountries.find(c => c.name.common === correctAnswer);\r\n  const correctFlagUrl = correctCountry?.flags?.png;\r\n  const validWrongChoices = allCountries\r\n    .filter(c => c.flags?.png && c.name.common !== correctAnswer)\r\n    .map(c => c.flags.png);\r\n\r\n  const incorrect = shuffle(validWrongChoices).slice(0, 3);\r\n  \r\n  // Ensure correct answer is a flag URL\r\n  return shuffle([...incorrect, correctFlagUrl]);\r\n}\r\n\r\n\r\n  return [];\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAC/B,eAAe,SAASC,eAAeA,CAACC,aAAa,EAAEC,YAAY,EAAEC,IAAI,EAAE;EAEzE,IAAIA,IAAI,KAAK,SAAS,EAAE;IACtB,MAAMC,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,IAAID,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,KAAKN,aAAa,CAAC,CACxEO,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;IACzB,MAAME,SAAS,GAAGV,OAAO,CAACK,iBAAiB,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACxD,OAAOX,OAAO,CAAC,CAAC,GAAGU,SAAS,EAAER,aAAa,CAAC,CAAC;EAC/C,CAAC,MACI,IAAIE,IAAI,KAAK,MAAM,EAAC;IAAA,IAAAQ,qBAAA;IACzB,MAAMC,cAAc,GAAGV,YAAY,CAACW,IAAI,CAACP,CAAC,IAAIA,CAAC,CAACQ,IAAI,CAACC,MAAM,KAAKd,aAAa,CAAC;IAC9E,MAAMe,cAAc,GAAGJ,cAAc,aAAdA,cAAc,wBAAAD,qBAAA,GAAdC,cAAc,CAAEK,KAAK,cAAAN,qBAAA,uBAArBA,qBAAA,CAAuBO,GAAG;IACjD,MAAMd,iBAAiB,GAAGF,YAAY,CACnCG,MAAM,CAACC,CAAC;MAAA,IAAAa,QAAA;MAAA,OAAI,EAAAA,QAAA,GAAAb,CAAC,CAACW,KAAK,cAAAE,QAAA,uBAAPA,QAAA,CAASD,GAAG,KAAIZ,CAAC,CAACQ,IAAI,CAACC,MAAM,KAAKd,aAAa;IAAA,EAAC,CAC5DO,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACW,KAAK,CAACC,GAAG,CAAC;IAExB,MAAMT,SAAS,GAAGV,OAAO,CAACK,iBAAiB,CAAC,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;IAExD;IACA,OAAOX,OAAO,CAAC,CAAC,GAAGU,SAAS,EAAEO,cAAc,CAAC,CAAC;EAChD;EAGE,OAAO,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}